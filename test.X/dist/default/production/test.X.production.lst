

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Sun Apr 27 21:52:38 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,space=0,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    12                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=1
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19     0000                     
    20                           ; Generated 26/03/2025 GMT
    21                           ; 
    22                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F887 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54     0004                     fsr             equ	4
    55     0004                     fsr0            equ	4
    56     0000                     indf            equ	0
    57     0000                     indf0           equ	0
    58     0002                     pc              equ	2
    59     0002                     pcl             equ	2
    60     000A                     pclath          equ	10
    61     0003                     status          equ	3
    62     0000                     INDF            equ	0	;# 
    63     0001                     TMR0            equ	1	;# 
    64     0002                     PCL             equ	2	;# 
    65     0003                     STATUS          equ	3	;# 
    66     0004                     FSR             equ	4	;# 
    67     0005                     PORTA           equ	5	;# 
    68     0006                     PORTB           equ	6	;# 
    69     0007                     PORTC           equ	7	;# 
    70     0008                     PORTD           equ	8	;# 
    71     0009                     PORTE           equ	9	;# 
    72     000A                     PCLATH          equ	10	;# 
    73     000B                     INTCON          equ	11	;# 
    74     000C                     PIR1            equ	12	;# 
    75     000D                     PIR2            equ	13	;# 
    76     000E                     TMR1            equ	14	;# 
    77     000E                     TMR1L           equ	14	;# 
    78     000F                     TMR1H           equ	15	;# 
    79     0010                     T1CON           equ	16	;# 
    80     0011                     TMR2            equ	17	;# 
    81     0012                     T2CON           equ	18	;# 
    82     0013                     SSPBUF          equ	19	;# 
    83     0014                     SSPCON          equ	20	;# 
    84     0015                     CCPR1           equ	21	;# 
    85     0015                     CCPR1L          equ	21	;# 
    86     0016                     CCPR1H          equ	22	;# 
    87     0017                     CCP1CON         equ	23	;# 
    88     0018                     RCSTA           equ	24	;# 
    89     0019                     TXREG           equ	25	;# 
    90     001A                     RCREG           equ	26	;# 
    91     001B                     CCPR2           equ	27	;# 
    92     001B                     CCPR2L          equ	27	;# 
    93     001C                     CCPR2H          equ	28	;# 
    94     001D                     CCP2CON         equ	29	;# 
    95     001E                     ADRESH          equ	30	;# 
    96     001F                     ADCON0          equ	31	;# 
    97     0081                     OPTION_REG      equ	129	;# 
    98     0085                     TRISA           equ	133	;# 
    99     0086                     TRISB           equ	134	;# 
   100     0087                     TRISC           equ	135	;# 
   101     0088                     TRISD           equ	136	;# 
   102     0089                     TRISE           equ	137	;# 
   103     008C                     PIE1            equ	140	;# 
   104     008D                     PIE2            equ	141	;# 
   105     008E                     PCON            equ	142	;# 
   106     008F                     OSCCON          equ	143	;# 
   107     0090                     OSCTUNE         equ	144	;# 
   108     0091                     SSPCON2         equ	145	;# 
   109     0092                     PR2             equ	146	;# 
   110     0093                     SSPADD          equ	147	;# 
   111     0093                     SSPMSK          equ	147	;# 
   112     0093                     MSK             equ	147	;# 
   113     0094                     SSPSTAT         equ	148	;# 
   114     0095                     WPUB            equ	149	;# 
   115     0096                     IOCB            equ	150	;# 
   116     0097                     VRCON           equ	151	;# 
   117     0098                     TXSTA           equ	152	;# 
   118     0099                     SPBRG           equ	153	;# 
   119     009A                     SPBRGH          equ	154	;# 
   120     009B                     PWM1CON         equ	155	;# 
   121     009C                     ECCPAS          equ	156	;# 
   122     009D                     PSTRCON         equ	157	;# 
   123     009E                     ADRESL          equ	158	;# 
   124     009F                     ADCON1          equ	159	;# 
   125     0105                     WDTCON          equ	261	;# 
   126     0107                     CM1CON0         equ	263	;# 
   127     0108                     CM2CON0         equ	264	;# 
   128     0109                     CM2CON1         equ	265	;# 
   129     010C                     EEDATA          equ	268	;# 
   130     010C                     EEDAT           equ	268	;# 
   131     010D                     EEADR           equ	269	;# 
   132     010E                     EEDATH          equ	270	;# 
   133     010F                     EEADRH          equ	271	;# 
   134     0185                     SRCON           equ	389	;# 
   135     0187                     BAUDCTL         equ	391	;# 
   136     0188                     ANSEL           equ	392	;# 
   137     0189                     ANSELH          equ	393	;# 
   138     018C                     EECON1          equ	396	;# 
   139     018D                     EECON2          equ	397	;# 
   140     0000                     INDF            equ	0	;# 
   141     0001                     TMR0            equ	1	;# 
   142     0002                     PCL             equ	2	;# 
   143     0003                     STATUS          equ	3	;# 
   144     0004                     FSR             equ	4	;# 
   145     0005                     PORTA           equ	5	;# 
   146     0006                     PORTB           equ	6	;# 
   147     0007                     PORTC           equ	7	;# 
   148     0008                     PORTD           equ	8	;# 
   149     0009                     PORTE           equ	9	;# 
   150     000A                     PCLATH          equ	10	;# 
   151     000B                     INTCON          equ	11	;# 
   152     000C                     PIR1            equ	12	;# 
   153     000D                     PIR2            equ	13	;# 
   154     000E                     TMR1            equ	14	;# 
   155     000E                     TMR1L           equ	14	;# 
   156     000F                     TMR1H           equ	15	;# 
   157     0010                     T1CON           equ	16	;# 
   158     0011                     TMR2            equ	17	;# 
   159     0012                     T2CON           equ	18	;# 
   160     0013                     SSPBUF          equ	19	;# 
   161     0014                     SSPCON          equ	20	;# 
   162     0015                     CCPR1           equ	21	;# 
   163     0015                     CCPR1L          equ	21	;# 
   164     0016                     CCPR1H          equ	22	;# 
   165     0017                     CCP1CON         equ	23	;# 
   166     0018                     RCSTA           equ	24	;# 
   167     0019                     TXREG           equ	25	;# 
   168     001A                     RCREG           equ	26	;# 
   169     001B                     CCPR2           equ	27	;# 
   170     001B                     CCPR2L          equ	27	;# 
   171     001C                     CCPR2H          equ	28	;# 
   172     001D                     CCP2CON         equ	29	;# 
   173     001E                     ADRESH          equ	30	;# 
   174     001F                     ADCON0          equ	31	;# 
   175     0081                     OPTION_REG      equ	129	;# 
   176     0085                     TRISA           equ	133	;# 
   177     0086                     TRISB           equ	134	;# 
   178     0087                     TRISC           equ	135	;# 
   179     0088                     TRISD           equ	136	;# 
   180     0089                     TRISE           equ	137	;# 
   181     008C                     PIE1            equ	140	;# 
   182     008D                     PIE2            equ	141	;# 
   183     008E                     PCON            equ	142	;# 
   184     008F                     OSCCON          equ	143	;# 
   185     0090                     OSCTUNE         equ	144	;# 
   186     0091                     SSPCON2         equ	145	;# 
   187     0092                     PR2             equ	146	;# 
   188     0093                     SSPADD          equ	147	;# 
   189     0093                     SSPMSK          equ	147	;# 
   190     0093                     MSK             equ	147	;# 
   191     0094                     SSPSTAT         equ	148	;# 
   192     0095                     WPUB            equ	149	;# 
   193     0096                     IOCB            equ	150	;# 
   194     0097                     VRCON           equ	151	;# 
   195     0098                     TXSTA           equ	152	;# 
   196     0099                     SPBRG           equ	153	;# 
   197     009A                     SPBRGH          equ	154	;# 
   198     009B                     PWM1CON         equ	155	;# 
   199     009C                     ECCPAS          equ	156	;# 
   200     009D                     PSTRCON         equ	157	;# 
   201     009E                     ADRESL          equ	158	;# 
   202     009F                     ADCON1          equ	159	;# 
   203     0105                     WDTCON          equ	261	;# 
   204     0107                     CM1CON0         equ	263	;# 
   205     0108                     CM2CON0         equ	264	;# 
   206     0109                     CM2CON1         equ	265	;# 
   207     010C                     EEDATA          equ	268	;# 
   208     010C                     EEDAT           equ	268	;# 
   209     010D                     EEADR           equ	269	;# 
   210     010E                     EEDATH          equ	270	;# 
   211     010F                     EEADRH          equ	271	;# 
   212     0185                     SRCON           equ	389	;# 
   213     0187                     BAUDCTL         equ	391	;# 
   214     0188                     ANSEL           equ	392	;# 
   215     0189                     ANSELH          equ	393	;# 
   216     018C                     EECON1          equ	396	;# 
   217     018D                     EECON2          equ	397	;# 
   218                           
   219                           	psect	idataBANK0
   220     0605                     __pidataBANK0:
   221                           
   222                           ;initializer for _binary_pattern
   223     0605  34C0               	retlw	192
   224     0606  34F9               	retlw	249
   225     0607  34A4               	retlw	164
   226     0608  34B0               	retlw	176
   227     0609  3499               	retlw	153
   228     060A  3492               	retlw	146
   229     060B  3482               	retlw	130
   230     060C  34F8               	retlw	248
   231     060D  3480               	retlw	128
   232     060E  3490               	retlw	144
   233                           
   234                           	psect	nvBANK0
   235     002A                     __pnvBANK0:
   236     002A                     _d:
   237     002A                     	ds	2
   238     002C                     _c:
   239     002C                     	ds	2
   240     002E                     _b:
   241     002E                     	ds	2
   242     0030                     _a:
   243     0030                     	ds	2
   244     0006                     _PORTBbits      set	6
   245     0007                     _PORTCbits      set	7
   246     0086                     _TRISB          set	134
   247     043A                     _TRISC2         set	1082
   248     0439                     _TRISC1         set	1081
   249     0438                     _TRISC0         set	1080
   250                           
   251                           	psect	cinit
   252     07EC                     start_initialization:	
   253                           ; #config settings
   254                           
   255     07EC                     __initialization:
   256                           
   257                           ; Initialize objects allocated to BANK0
   258     07EC  1383               	bcf	3,7	;select IRP bank0
   259     07ED  302A               	movlw	low (__pdataBANK0+10)
   260     07EE  00FD               	movwf	btemp+-1
   261     07EF  3006               	movlw	high __pidataBANK0
   262     07F0  00FE               	movwf	btemp
   263     07F1  3005               	movlw	low __pidataBANK0
   264     07F2  00FF               	movwf	btemp+1
   265     07F3  3020               	movlw	low __pdataBANK0
   266     07F4  0084               	movwf	4
   267     07F5  120A  118A  262D  120A  118A  	fcall	init_ram0
   268                           
   269                           ; Clear objects allocated to BANK0
   270     07FA  01B2               	clrf	__pbssBANK0& (0+127)
   271     07FB  01B3               	clrf	(__pbssBANK0+1)& (0+127)
   272     07FC                     end_of_initialization:	
   273                           ;End of C runtime variable initialization code
   274                           
   275     07FC                     __end_of__initialization:
   276     07FC  0183               	clrf	3
   277     07FD  120A  118A  2EED   	ljmp	_main	;jump to C main() function
   278                           
   279                           	psect	bssBANK0
   280     0032                     __pbssBANK0:
   281     0032                     _counter:
   282     0032                     	ds	2
   283                           
   284                           	psect	dataBANK0
   285     0020                     __pdataBANK0:
   286     0020                     _binary_pattern:
   287     0020                     	ds	10
   288                           
   289                           	psect	inittext
   290     0629                     init_fetch0:	
   291                           ;	Called with low address in FSR and high address in W
   292                           
   293     0629  087E               	movf	btemp,w
   294     062A  008A               	movwf	10
   295     062B  087F               	movf	btemp+1,w
   296     062C  0082               	movwf	2
   297     062D                     init_ram0:	
   298                           ;Called with:
   299                           ;	high address of idata address in btemp 
   300                           ;	low address of idata address in btemp+1 
   301                           ;	low address of data in FSR
   302                           ;	high address + 1 of data in btemp-1
   303                           
   304     062D  120A  118A  2629  120A  118A  	fcall	init_fetch0
   305     0632  0080               	movwf	0
   306     0633  0A84               	incf	4,f
   307     0634  0804               	movf	4,w
   308     0635  067D               	xorwf	btemp+-1,w
   309     0636  1903               	btfsc	3,2
   310     0637  3400               	retlw	0
   311     0638  0AFF               	incf	btemp+1,f
   312     0639  1903               	btfsc	3,2
   313     063A  0AFE               	incf	btemp,f
   314     063B  2E2D               	goto	init_ram0
   315                           
   316                           	psect	cstackCOMMON
   317     0070                     __pcstackCOMMON:
   318     0070                     ?_clock_signal:
   319     0070                     ?_latch_enable:	
   320                           ; 1 bytes @ 0x0
   321                           
   322     0070                     ?_main:	
   323                           ; 1 bytes @ 0x0
   324                           
   325     0070                     ?___lwdiv:	
   326                           ; 1 bytes @ 0x0
   327                           
   328     0070                     ___lwdiv@divisor:	
   329                           ; 2 bytes @ 0x0
   330                           
   331     0070                     ??_clock_signal:	
   332                           ; 2 bytes @ 0x0
   333                           
   334     0070                     ??_latch_enable:	
   335                           ; 1 bytes @ 0x0
   336                           
   337                           
   338                           ; 1 bytes @ 0x0
   339     0070                     	ds	1
   340     0071                     ?_send_data:
   341     0071                     send_data@data_out:	
   342                           ; 1 bytes @ 0x1
   343                           
   344                           
   345                           ; 2 bytes @ 0x1
   346     0071                     	ds	1
   347     0072                     ___lwdiv@dividend:
   348                           
   349                           ; 2 bytes @ 0x2
   350     0072                     	ds	1
   351     0073                     ??_send_data:
   352                           
   353                           ; 1 bytes @ 0x3
   354     0073                     	ds	1
   355     0074                     ___lwdiv@quotient:
   356     0074                     ??___lwdiv:	
   357                           ; 2 bytes @ 0x4
   358                           
   359                           
   360                           ; 1 bytes @ 0x4
   361     0074                     	ds	2
   362     0076                     ___lwdiv@counter:
   363     0076                     send_data@i:	
   364                           ; 1 bytes @ 0x6
   365                           
   366                           
   367                           ; 2 bytes @ 0x6
   368     0076                     	ds	1
   369     0077                     ?___lwmod:
   370     0077                     ___lwmod@divisor:	
   371                           ; 2 bytes @ 0x7
   372                           
   373                           
   374                           ; 2 bytes @ 0x7
   375     0077                     	ds	2
   376     0079                     ___lwmod@dividend:
   377                           
   378                           ; 2 bytes @ 0x9
   379     0079                     	ds	2
   380     007B                     ___lwmod@counter:
   381     007B                     ??___lwmod:	
   382                           ; 1 bytes @ 0xB
   383                           
   384                           
   385                           ; 1 bytes @ 0xB
   386     007B                     	ds	1
   387     007C                     ??_main:
   388                           
   389                           ; 1 bytes @ 0xC
   390     007C                     	ds	2
   391                           
   392                           	psect	maintext
   393     06ED                     __pmaintext:	
   394 ;;
   395 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   396 ;;
   397 ;; *************** function _main *****************
   398 ;; Defined at:
   399 ;;		line 47 in file "main.c"
   400 ;; Parameters:    Size  Location     Type
   401 ;;		None
   402 ;; Auto vars:     Size  Location     Type
   403 ;;		None
   404 ;; Return value:  Size  Location     Type
   405 ;;                  1    wreg      void 
   406 ;; Registers used:
   407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   408 ;; Tracked objects:
   409 ;;		On entry : B00/0
   410 ;;		On exit  : 0/0
   411 ;;		Unchanged: 0/0
   412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   413 ;;      Params:         0       0       0       0       0
   414 ;;      Locals:         0       0       0       0       0
   415 ;;      Temps:          2       0       0       0       0
   416 ;;      Totals:         2       0       0       0       0
   417 ;;Total ram usage:        2 bytes
   418 ;; Hardware stack levels required when called: 2
   419 ;; This function calls:
   420 ;;		___lwdiv
   421 ;;		___lwmod
   422 ;;		_send_data
   423 ;; This function is called by:
   424 ;;		Startup code after reset
   425 ;; This function uses a non-reentrant model
   426 ;;
   427                           
   428     06ED                     _main:	
   429                           ;psect for function _main
   430                           
   431     06ED                     l800:	
   432                           ;incstack = 0
   433                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   434                           
   435                           
   436                           ;main.c: 49:   TRISC0 = 0;
   437     06ED  1683               	bsf	3,5	;RP0=1, select bank1
   438     06EE  1303               	bcf	3,6	;RP1=0, select bank1
   439     06EF  1007               	bcf	7,0	;volatile
   440                           
   441                           ;main.c: 50:   TRISC1 = 0;
   442     06F0  1087               	bcf	7,1	;volatile
   443                           
   444                           ;main.c: 51:   TRISC2 = 0;
   445     06F1  1107               	bcf	7,2	;volatile
   446     06F2                     l802:
   447                           
   448                           ;main.c: 52:   TRISB=0X00;
   449     06F2  0186               	clrf	6	;volatile
   450     06F3                     l804:
   451                           
   452                           ;main.c: 53:   PORTBbits.RB0 = 0;
   453     06F3  1283               	bcf	3,5	;RP0=0, select bank0
   454     06F4  1303               	bcf	3,6	;RP1=0, select bank0
   455     06F5  1006               	bcf	6,0	;volatile
   456     06F6                     l806:
   457                           
   458                           ;main.c: 54:   PORTBbits.RB1 = 0;
   459     06F6  1086               	bcf	6,1	;volatile
   460     06F7                     l808:
   461                           
   462                           ;main.c: 55:   PORTBbits.RB2 = 0;
   463     06F7  1106               	bcf	6,2	;volatile
   464     06F8                     l810:
   465                           
   466                           ;main.c: 56:   PORTBbits.RB3 = 0;
   467     06F8  1186               	bcf	6,3	;volatile
   468     06F9                     l812:
   469                           
   470                           ;main.c: 58:       {;main.c: 60:          a = counter / 1000;
   471     06F9  30E8               	movlw	232
   472     06FA  00F0               	movwf	___lwdiv@divisor
   473     06FB  3003               	movlw	3
   474     06FC  00F1               	movwf	___lwdiv@divisor+1
   475     06FD  0833               	movf	_counter+1,w
   476     06FE  00F3               	movwf	___lwdiv@dividend+1
   477     06FF  0832               	movf	_counter,w
   478     0700  00F2               	movwf	___lwdiv@dividend
   479     0701  120A  118A  26AB  120A  118A  	fcall	___lwdiv
   480     0706  0871               	movf	?___lwdiv+1,w
   481     0707  1283               	bcf	3,5	;RP0=0, select bank0
   482     0708  1303               	bcf	3,6	;RP1=0, select bank0
   483     0709  00B1               	movwf	_a+1
   484     070A  0870               	movf	?___lwdiv,w
   485     070B  00B0               	movwf	_a
   486     070C                     l814:
   487                           
   488                           ;main.c: 61:          b = ((counter/100)%10);
   489     070C  300A               	movlw	10
   490     070D  00F7               	movwf	___lwmod@divisor
   491     070E  3000               	movlw	0
   492     070F  00F8               	movwf	___lwmod@divisor+1
   493     0710  3064               	movlw	100
   494     0711  00F0               	movwf	___lwdiv@divisor
   495     0712  3000               	movlw	0
   496     0713  00F1               	movwf	___lwdiv@divisor+1
   497     0714  0833               	movf	_counter+1,w
   498     0715  00F3               	movwf	___lwdiv@dividend+1
   499     0716  0832               	movf	_counter,w
   500     0717  00F2               	movwf	___lwdiv@dividend
   501     0718  120A  118A  26AB  120A  118A  	fcall	___lwdiv
   502     071D  0871               	movf	?___lwdiv+1,w
   503     071E  00FA               	movwf	___lwmod@dividend+1
   504     071F  0870               	movf	?___lwdiv,w
   505     0720  00F9               	movwf	___lwmod@dividend
   506     0721  120A  118A  2673  120A  118A  	fcall	___lwmod
   507     0726  0878               	movf	?___lwmod+1,w
   508     0727  1283               	bcf	3,5	;RP0=0, select bank0
   509     0728  1303               	bcf	3,6	;RP1=0, select bank0
   510     0729  00AF               	movwf	_b+1
   511     072A  0877               	movf	?___lwmod,w
   512     072B  00AE               	movwf	_b
   513     072C                     l816:
   514                           
   515                           ;main.c: 62:          c = ((counter/10)%10);
   516     072C  300A               	movlw	10
   517     072D  00F7               	movwf	___lwmod@divisor
   518     072E  3000               	movlw	0
   519     072F  00F8               	movwf	___lwmod@divisor+1
   520     0730  300A               	movlw	10
   521     0731  00F0               	movwf	___lwdiv@divisor
   522     0732  3000               	movlw	0
   523     0733  00F1               	movwf	___lwdiv@divisor+1
   524     0734  0833               	movf	_counter+1,w
   525     0735  00F3               	movwf	___lwdiv@dividend+1
   526     0736  0832               	movf	_counter,w
   527     0737  00F2               	movwf	___lwdiv@dividend
   528     0738  120A  118A  26AB  120A  118A  	fcall	___lwdiv
   529     073D  0871               	movf	?___lwdiv+1,w
   530     073E  00FA               	movwf	___lwmod@dividend+1
   531     073F  0870               	movf	?___lwdiv,w
   532     0740  00F9               	movwf	___lwmod@dividend
   533     0741  120A  118A  2673  120A  118A  	fcall	___lwmod
   534     0746  0878               	movf	?___lwmod+1,w
   535     0747  1283               	bcf	3,5	;RP0=0, select bank0
   536     0748  1303               	bcf	3,6	;RP1=0, select bank0
   537     0749  00AD               	movwf	_c+1
   538     074A  0877               	movf	?___lwmod,w
   539     074B  00AC               	movwf	_c
   540     074C                     l818:
   541                           
   542                           ;main.c: 63:          d = (counter%10);
   543     074C  300A               	movlw	10
   544     074D  00F7               	movwf	___lwmod@divisor
   545     074E  3000               	movlw	0
   546     074F  00F8               	movwf	___lwmod@divisor+1
   547     0750  0833               	movf	_counter+1,w
   548     0751  00FA               	movwf	___lwmod@dividend+1
   549     0752  0832               	movf	_counter,w
   550     0753  00F9               	movwf	___lwmod@dividend
   551     0754  120A  118A  2673  120A  118A  	fcall	___lwmod
   552     0759  0878               	movf	?___lwmod+1,w
   553     075A  1283               	bcf	3,5	;RP0=0, select bank0
   554     075B  1303               	bcf	3,6	;RP1=0, select bank0
   555     075C  00AB               	movwf	_d+1
   556     075D  0877               	movf	?___lwmod,w
   557     075E  00AA               	movwf	_d
   558     075F                     l820:
   559                           
   560                           ;main.c: 64:          send_data(binary_pattern[a]);
   561     075F  0830               	movf	_a,w
   562     0760  3E20               	addlw	(low (_binary_pattern| 0))& (0+255)
   563     0761  0084               	movwf	4
   564     0762  1383               	bcf	3,7	;select IRP bank0
   565     0763  0800               	movf	0,w
   566     0764  00FC               	movwf	??_main
   567     0765  01FD               	clrf	??_main+1
   568     0766  087C               	movf	??_main,w
   569     0767  00F1               	movwf	send_data@data_out
   570     0768  087D               	movf	??_main+1,w
   571     0769  00F2               	movwf	send_data@data_out+1
   572     076A  120A  118A  263C  120A  118A  	fcall	_send_data
   573     076F                     l822:
   574                           
   575                           ;main.c: 65:         PORTBbits.RB0=1;
   576     076F  1283               	bcf	3,5	;RP0=0, select bank0
   577     0770  1303               	bcf	3,6	;RP1=0, select bank0
   578     0771  1406               	bsf	6,0	;volatile
   579     0772                     l824:
   580                           
   581                           ;main.c: 66:         _delay((unsigned long)((10)*(2000000/4000.0)));
   582     0772  3007               	movlw	7
   583     0773  00FD               	movwf	??_main+1
   584     0774  307D               	movlw	125
   585     0775  00FC               	movwf	??_main
   586     0776                     u337:
   587     0776  0BFC               	decfsz	??_main,f
   588     0777  2F76               	goto	u337
   589     0778  0BFD               	decfsz	??_main+1,f
   590     0779  2F76               	goto	u337
   591     077A                     l826:
   592                           
   593                           ;main.c: 67:         PORTBbits.RB0=0;
   594     077A  1283               	bcf	3,5	;RP0=0, select bank0
   595     077B  1303               	bcf	3,6	;RP1=0, select bank0
   596     077C  1006               	bcf	6,0	;volatile
   597     077D                     l828:
   598                           
   599                           ;main.c: 68:         send_data(binary_pattern[b]);
   600     077D  082E               	movf	_b,w
   601     077E  3E20               	addlw	(low (_binary_pattern| 0))& (0+255)
   602     077F  0084               	movwf	4
   603     0780  1383               	bcf	3,7	;select IRP bank0
   604     0781  0800               	movf	0,w
   605     0782  00FC               	movwf	??_main
   606     0783  01FD               	clrf	??_main+1
   607     0784  087C               	movf	??_main,w
   608     0785  00F1               	movwf	send_data@data_out
   609     0786  087D               	movf	??_main+1,w
   610     0787  00F2               	movwf	send_data@data_out+1
   611     0788  120A  118A  263C  120A  118A  	fcall	_send_data
   612     078D                     l830:
   613                           
   614                           ;main.c: 69:         PORTBbits.RB1=1;
   615     078D  1283               	bcf	3,5	;RP0=0, select bank0
   616     078E  1303               	bcf	3,6	;RP1=0, select bank0
   617     078F  1486               	bsf	6,1	;volatile
   618     0790                     l832:
   619                           
   620                           ;main.c: 70:         _delay((unsigned long)((10)*(2000000/4000.0)));
   621     0790  3007               	movlw	7
   622     0791  00FD               	movwf	??_main+1
   623     0792  307D               	movlw	125
   624     0793  00FC               	movwf	??_main
   625     0794                     u347:
   626     0794  0BFC               	decfsz	??_main,f
   627     0795  2F94               	goto	u347
   628     0796  0BFD               	decfsz	??_main+1,f
   629     0797  2F94               	goto	u347
   630     0798                     l834:
   631                           
   632                           ;main.c: 71:         PORTBbits.RB1=0;
   633     0798  1283               	bcf	3,5	;RP0=0, select bank0
   634     0799  1303               	bcf	3,6	;RP1=0, select bank0
   635     079A  1086               	bcf	6,1	;volatile
   636     079B                     l836:
   637                           
   638                           ;main.c: 72:          send_data(binary_pattern[c]);
   639     079B  082C               	movf	_c,w
   640     079C  3E20               	addlw	(low (_binary_pattern| 0))& (0+255)
   641     079D  0084               	movwf	4
   642     079E  1383               	bcf	3,7	;select IRP bank0
   643     079F  0800               	movf	0,w
   644     07A0  00FC               	movwf	??_main
   645     07A1  01FD               	clrf	??_main+1
   646     07A2  087C               	movf	??_main,w
   647     07A3  00F1               	movwf	send_data@data_out
   648     07A4  087D               	movf	??_main+1,w
   649     07A5  00F2               	movwf	send_data@data_out+1
   650     07A6  120A  118A  263C  120A  118A  	fcall	_send_data
   651     07AB                     l838:
   652                           
   653                           ;main.c: 73:          PORTBbits.RB2 = 1;
   654     07AB  1283               	bcf	3,5	;RP0=0, select bank0
   655     07AC  1303               	bcf	3,6	;RP1=0, select bank0
   656     07AD  1506               	bsf	6,2	;volatile
   657     07AE                     l840:
   658                           
   659                           ;main.c: 74:          _delay((unsigned long)((10)*(2000000/4000.0)));
   660     07AE  3007               	movlw	7
   661     07AF  00FD               	movwf	??_main+1
   662     07B0  307D               	movlw	125
   663     07B1  00FC               	movwf	??_main
   664     07B2                     u357:
   665     07B2  0BFC               	decfsz	??_main,f
   666     07B3  2FB2               	goto	u357
   667     07B4  0BFD               	decfsz	??_main+1,f
   668     07B5  2FB2               	goto	u357
   669     07B6                     l842:
   670                           
   671                           ;main.c: 75:         PORTBbits.RB2 = 0;
   672     07B6  1283               	bcf	3,5	;RP0=0, select bank0
   673     07B7  1303               	bcf	3,6	;RP1=0, select bank0
   674     07B8  1106               	bcf	6,2	;volatile
   675     07B9                     l844:
   676                           
   677                           ;main.c: 76:        send_data(binary_pattern[d]);
   678     07B9  082A               	movf	_d,w
   679     07BA  3E20               	addlw	(low (_binary_pattern| 0))& (0+255)
   680     07BB  0084               	movwf	4
   681     07BC  1383               	bcf	3,7	;select IRP bank0
   682     07BD  0800               	movf	0,w
   683     07BE  00FC               	movwf	??_main
   684     07BF  01FD               	clrf	??_main+1
   685     07C0  087C               	movf	??_main,w
   686     07C1  00F1               	movwf	send_data@data_out
   687     07C2  087D               	movf	??_main+1,w
   688     07C3  00F2               	movwf	send_data@data_out+1
   689     07C4  120A  118A  263C  120A  118A  	fcall	_send_data
   690     07C9                     l846:
   691                           
   692                           ;main.c: 77:        PORTBbits.RB3 = 1;
   693     07C9  1283               	bcf	3,5	;RP0=0, select bank0
   694     07CA  1303               	bcf	3,6	;RP1=0, select bank0
   695     07CB  1586               	bsf	6,3	;volatile
   696     07CC                     l848:
   697                           
   698                           ;main.c: 78:        _delay((unsigned long)((10)*(2000000/4000.0)));
   699     07CC  3007               	movlw	7
   700     07CD  00FD               	movwf	??_main+1
   701     07CE  307D               	movlw	125
   702     07CF  00FC               	movwf	??_main
   703     07D0                     u367:
   704     07D0  0BFC               	decfsz	??_main,f
   705     07D1  2FD0               	goto	u367
   706     07D2  0BFD               	decfsz	??_main+1,f
   707     07D3  2FD0               	goto	u367
   708     07D4                     l850:
   709                           
   710                           ;main.c: 79:        PORTBbits.RB3 = 0;
   711     07D4  1283               	bcf	3,5	;RP0=0, select bank0
   712     07D5  1303               	bcf	3,6	;RP1=0, select bank0
   713     07D6  1186               	bcf	6,3	;volatile
   714     07D7                     l852:
   715                           
   716                           ;main.c: 81:      if(counter>=9999)
   717     07D7  3027               	movlw	39
   718     07D8  0233               	subwf	_counter+1,w
   719     07D9  300F               	movlw	15
   720     07DA  1903               	skipnz
   721     07DB  0232               	subwf	_counter,w
   722     07DC  1C03               	skipc
   723     07DD  2FDF               	goto	u321
   724     07DE  2FE0               	goto	u320
   725     07DF                     u321:
   726     07DF  2FE2               	goto	l856
   727     07E0                     u320:
   728     07E0                     l854:
   729                           
   730                           ;main.c: 82:          {;main.c: 83:          counter=0;
   731     07E0  01B2               	clrf	_counter
   732     07E1  01B3               	clrf	_counter+1
   733     07E2                     l856:
   734                           
   735                           ;main.c: 85:          counter++;
   736     07E2  3001               	movlw	1
   737     07E3  07B2               	addwf	_counter,f
   738     07E4  1803               	skipnc
   739     07E5  0AB3               	incf	_counter+1,f
   740     07E6  3000               	movlw	0
   741     07E7  07B3               	addwf	_counter+1,f
   742     07E8  2EF9               	goto	l812
   743     07E9  120A  118A  2800   	ljmp	start
   744     07EC                     __end_of_main:
   745                           
   746                           	psect	text1
   747     063C                     __ptext1:	
   748 ;; *************** function _send_data *****************
   749 ;; Defined at:
   750 ;;		line 34 in file "main.c"
   751 ;; Parameters:    Size  Location     Type
   752 ;;  data_out        2    1[COMMON] unsigned int 
   753 ;; Auto vars:     Size  Location     Type
   754 ;;  i               2    6[COMMON] int 
   755 ;; Return value:  Size  Location     Type
   756 ;;                  1    wreg      void 
   757 ;; Registers used:
   758 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   759 ;; Tracked objects:
   760 ;;		On entry : 0/0
   761 ;;		On exit  : 0/0
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   764 ;;      Params:         2       0       0       0       0
   765 ;;      Locals:         2       0       0       0       0
   766 ;;      Temps:          3       0       0       0       0
   767 ;;      Totals:         7       0       0       0       0
   768 ;;Total ram usage:        7 bytes
   769 ;; Hardware stack levels used: 1
   770 ;; Hardware stack levels required when called: 1
   771 ;; This function calls:
   772 ;;		_clock_signal
   773 ;;		_latch_enable
   774 ;; This function is called by:
   775 ;;		_main
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779     063C                     _send_data:	
   780                           ;psect for function _send_data
   781                           
   782     063C                     l736:	
   783                           ;incstack = 0
   784                           ; Regs used in _send_data: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   785                           
   786                           
   787                           ;main.c: 34: void send_data(unsigned int data_out);main.c: 35: {;main.c: 36:     int i;;
      +                          main.c: 37:     for (i=0 ; i<8 ; i++)
   788     063C  01F6               	clrf	send_data@i
   789     063D  01F7               	clrf	send_data@i+1
   790     063E                     l742:
   791                           
   792                           ;main.c: 38:     {;main.c: 39:         PORTCbits.RC1 = (data_out >> i) & (0x01);
   793     063E  0872               	movf	send_data@data_out+1,w
   794     063F  00F4               	movwf	??_send_data+1
   795     0640  0871               	movf	send_data@data_out,w
   796     0641  00F3               	movwf	??_send_data
   797     0642  0A76               	incf	send_data@i,w
   798     0643  2E47               	goto	u174
   799     0644                     u175:
   800     0644  1003               	clrc
   801     0645  0CF4               	rrf	??_send_data+1,f
   802     0646  0CF3               	rrf	??_send_data,f
   803     0647                     u174:
   804     0647  3EFF               	addlw	-1
   805     0648  1D03               	skipz
   806     0649  2E44               	goto	u175
   807     064A  0873               	movf	??_send_data,w
   808     064B  3901               	andlw	1
   809     064C  00F5               	movwf	??_send_data+2
   810     064D  0DF5               	rlf	??_send_data+2,f
   811     064E  1283               	bcf	3,5	;RP0=0, select bank0
   812     064F  1303               	bcf	3,6	;RP1=0, select bank0
   813     0650  0807               	movf	7,w	;volatile
   814     0651  0675               	xorwf	??_send_data+2,w
   815     0652  39FD               	andlw	-3
   816     0653  0675               	xorwf	??_send_data+2,w
   817     0654  0087               	movwf	7	;volatile
   818     0655                     l744:
   819                           
   820                           ;main.c: 40:         clock_signal();
   821     0655  120A  118A  261A  120A  118A  	fcall	_clock_signal
   822     065A                     l746:
   823                           
   824                           ;main.c: 41:     }
   825     065A  3001               	movlw	1
   826     065B  07F6               	addwf	send_data@i,f
   827     065C  1803               	skipnc
   828     065D  0AF7               	incf	send_data@i+1,f
   829     065E  3000               	movlw	0
   830     065F  07F7               	addwf	send_data@i+1,f
   831     0660                     l748:
   832     0660  0877               	movf	send_data@i+1,w
   833     0661  3A80               	xorlw	128
   834     0662  00FF               	movwf	btemp+1
   835     0663  3080               	movlw	128
   836     0664  027F               	subwf	btemp+1,w
   837     0665  1D03               	skipz
   838     0666  2E69               	goto	u185
   839     0667  3008               	movlw	8
   840     0668  0276               	subwf	send_data@i,w
   841     0669                     u185:
   842     0669  1C03               	skipc
   843     066A  2E6C               	goto	u181
   844     066B  2E6D               	goto	u180
   845     066C                     u181:
   846     066C  2E3E               	goto	l742
   847     066D                     u180:
   848     066D                     l750:
   849                           
   850                           ;main.c: 42:     latch_enable();
   851     066D  120A  118A  260F  120A  118A  	fcall	_latch_enable
   852     0672                     l37:
   853     0672  0008               	return
   854     0673                     __end_of_send_data:
   855                           
   856                           	psect	text2
   857     060F                     __ptext2:	
   858 ;; *************** function _latch_enable *****************
   859 ;; Defined at:
   860 ;;		line 28 in file "main.c"
   861 ;; Parameters:    Size  Location     Type
   862 ;;		None
   863 ;; Auto vars:     Size  Location     Type
   864 ;;		None
   865 ;; Return value:  Size  Location     Type
   866 ;;                  1    wreg      void 
   867 ;; Registers used:
   868 ;;		wreg
   869 ;; Tracked objects:
   870 ;;		On entry : 0/0
   871 ;;		On exit  : 0/0
   872 ;;		Unchanged: 0/0
   873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   874 ;;      Params:         0       0       0       0       0
   875 ;;      Locals:         0       0       0       0       0
   876 ;;      Temps:          1       0       0       0       0
   877 ;;      Totals:         1       0       0       0       0
   878 ;;Total ram usage:        1 bytes
   879 ;; Hardware stack levels used: 1
   880 ;; This function calls:
   881 ;;		Nothing
   882 ;; This function is called by:
   883 ;;		_send_data
   884 ;; This function uses a non-reentrant model
   885 ;;
   886                           
   887     060F                     _latch_enable:	
   888                           ;psect for function _latch_enable
   889                           
   890     060F                     l730:	
   891                           ;incstack = 0
   892                           ; Regs used in _latch_enable: [wreg]
   893                           
   894                           
   895                           ;main.c: 30:     PORTCbits.RC2 = 1;
   896     060F  1283               	bcf	3,5	;RP0=0, select bank0
   897     0610  1303               	bcf	3,6	;RP1=0, select bank0
   898     0611  1507               	bsf	7,2	;volatile
   899     0612                     l732:
   900                           
   901                           ;main.c: 31:     _delay((unsigned long)((500)*(2000000/4000000.0)));
   902     0612  3053               	movlw	83
   903     0613  00F0               	movwf	??_latch_enable
   904     0614                     u377:
   905     0614  0BF0               	decfsz	??_latch_enable,f
   906     0615  2E14               	goto	u377
   907     0616                     l734:
   908                           
   909                           ;main.c: 32:     PORTCbits.RC2 = 0;
   910     0616  1283               	bcf	3,5	;RP0=0, select bank0
   911     0617  1303               	bcf	3,6	;RP1=0, select bank0
   912     0618  1107               	bcf	7,2	;volatile
   913     0619                     l32:
   914     0619  0008               	return
   915     061A                     __end_of_latch_enable:
   916                           
   917                           	psect	text3
   918     061A                     __ptext3:	
   919 ;; *************** function _clock_signal *****************
   920 ;; Defined at:
   921 ;;		line 22 in file "main.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;		None
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   935 ;;      Params:         0       0       0       0       0
   936 ;;      Locals:         0       0       0       0       0
   937 ;;      Temps:          1       0       0       0       0
   938 ;;      Totals:         1       0       0       0       0
   939 ;;Total ram usage:        1 bytes
   940 ;; Hardware stack levels used: 1
   941 ;; This function calls:
   942 ;;		Nothing
   943 ;; This function is called by:
   944 ;;		_send_data
   945 ;; This function uses a non-reentrant model
   946 ;;
   947                           
   948     061A                     _clock_signal:	
   949                           ;psect for function _clock_signal
   950                           
   951     061A                     l724:	
   952                           ;incstack = 0
   953                           ; Regs used in _clock_signal: [wreg]
   954                           
   955                           
   956                           ;main.c: 23:    PORTCbits.RC0 = 1;
   957     061A  1283               	bcf	3,5	;RP0=0, select bank0
   958     061B  1303               	bcf	3,6	;RP1=0, select bank0
   959     061C  1407               	bsf	7,0	;volatile
   960     061D                     l726:
   961                           
   962                           ;main.c: 24:     _delay((unsigned long)((500)*(2000000/4000000.0)));
   963     061D  3053               	movlw	83
   964     061E  00F0               	movwf	??_clock_signal
   965     061F                     u387:
   966     061F  0BF0               	decfsz	??_clock_signal,f
   967     0620  2E1F               	goto	u387
   968     0621                     l728:
   969                           
   970                           ;main.c: 25:    PORTCbits.RC0 = 0;
   971     0621  1283               	bcf	3,5	;RP0=0, select bank0
   972     0622  1303               	bcf	3,6	;RP1=0, select bank0
   973     0623  1007               	bcf	7,0	;volatile
   974                           
   975                           ;main.c: 26:     _delay((unsigned long)((500)*(2000000/4000000.0)));
   976     0624  3053               	movlw	83
   977     0625  00F0               	movwf	??_clock_signal
   978     0626                     u397:
   979     0626  0BF0               	decfsz	??_clock_signal,f
   980     0627  2E26               	goto	u397
   981     0628                     l29:
   982     0628  0008               	return
   983     0629                     __end_of_clock_signal:
   984                           
   985                           	psect	text4
   986     0673                     __ptext4:	
   987 ;; *************** function ___lwmod *****************
   988 ;; Defined at:
   989 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwmod.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;  divisor         2    7[COMMON] unsigned int 
   992 ;;  dividend        2    9[COMMON] unsigned int 
   993 ;; Auto vars:     Size  Location     Type
   994 ;;  counter         1   11[COMMON] unsigned char 
   995 ;; Return value:  Size  Location     Type
   996 ;;                  2    7[COMMON] unsigned int 
   997 ;; Registers used:
   998 ;;		wreg, status,2, status,0
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1004 ;;      Params:         4       0       0       0       0
  1005 ;;      Locals:         1       0       0       0       0
  1006 ;;      Temps:          0       0       0       0       0
  1007 ;;      Totals:         5       0       0       0       0
  1008 ;;Total ram usage:        5 bytes
  1009 ;; Hardware stack levels used: 1
  1010 ;; This function calls:
  1011 ;;		Nothing
  1012 ;; This function is called by:
  1013 ;;		_main
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017     0673                     ___lwmod:	
  1018                           ;psect for function ___lwmod
  1019                           
  1020     0673                     l778:	
  1021                           ;incstack = 0
  1022                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1023                           
  1024     0673  0877               	movf	___lwmod@divisor,w
  1025     0674  0478               	iorwf	___lwmod@divisor+1,w
  1026     0675  1903               	btfsc	3,2
  1027     0676  2E78               	goto	u261
  1028     0677  2E79               	goto	u260
  1029     0678                     u261:
  1030     0678  2EA6               	goto	l796
  1031     0679                     u260:
  1032     0679                     l780:
  1033     0679  3001               	movlw	1
  1034     067A  00FB               	movwf	___lwmod@counter
  1035     067B  2E85               	goto	l786
  1036     067C                     l782:
  1037     067C  3001               	movlw	1
  1038     067D                     u275:
  1039     067D  1003               	clrc
  1040     067E  0DF7               	rlf	___lwmod@divisor,f
  1041     067F  0DF8               	rlf	___lwmod@divisor+1,f
  1042     0680  3EFF               	addlw	-1
  1043     0681  1D03               	skipz
  1044     0682  2E7D               	goto	u275
  1045     0683                     l784:
  1046     0683  3001               	movlw	1
  1047     0684  07FB               	addwf	___lwmod@counter,f
  1048     0685                     l786:
  1049     0685  1FF8               	btfss	___lwmod@divisor+1,7
  1050     0686  2E88               	goto	u281
  1051     0687  2E89               	goto	u280
  1052     0688                     u281:
  1053     0688  2E7C               	goto	l782
  1054     0689                     u280:
  1055     0689                     l788:
  1056     0689  0878               	movf	___lwmod@divisor+1,w
  1057     068A  027A               	subwf	___lwmod@dividend+1,w
  1058     068B  1D03               	skipz
  1059     068C  2E8F               	goto	u295
  1060     068D  0877               	movf	___lwmod@divisor,w
  1061     068E  0279               	subwf	___lwmod@dividend,w
  1062     068F                     u295:
  1063     068F  1C03               	skipc
  1064     0690  2E92               	goto	u291
  1065     0691  2E93               	goto	u290
  1066     0692                     u291:
  1067     0692  2E99               	goto	l792
  1068     0693                     u290:
  1069     0693                     l790:
  1070     0693  0877               	movf	___lwmod@divisor,w
  1071     0694  02F9               	subwf	___lwmod@dividend,f
  1072     0695  0878               	movf	___lwmod@divisor+1,w
  1073     0696  1C03               	skipc
  1074     0697  03FA               	decf	___lwmod@dividend+1,f
  1075     0698  02FA               	subwf	___lwmod@dividend+1,f
  1076     0699                     l792:
  1077     0699  3001               	movlw	1
  1078     069A                     u305:
  1079     069A  1003               	clrc
  1080     069B  0CF8               	rrf	___lwmod@divisor+1,f
  1081     069C  0CF7               	rrf	___lwmod@divisor,f
  1082     069D  3EFF               	addlw	-1
  1083     069E  1D03               	skipz
  1084     069F  2E9A               	goto	u305
  1085     06A0                     l794:
  1086     06A0  3001               	movlw	1
  1087     06A1  02FB               	subwf	___lwmod@counter,f
  1088     06A2  1D03               	btfss	3,2
  1089     06A3  2EA5               	goto	u311
  1090     06A4  2EA6               	goto	u310
  1091     06A5                     u311:
  1092     06A5  2E89               	goto	l788
  1093     06A6                     u310:
  1094     06A6                     l796:
  1095     06A6  087A               	movf	___lwmod@dividend+1,w
  1096     06A7  00F8               	movwf	?___lwmod+1
  1097     06A8  0879               	movf	___lwmod@dividend,w
  1098     06A9  00F7               	movwf	?___lwmod
  1099     06AA                     l422:
  1100     06AA  0008               	return
  1101     06AB                     __end_of___lwmod:
  1102                           
  1103                           	psect	text5
  1104     06AB                     __ptext5:	
  1105 ;; *************** function ___lwdiv *****************
  1106 ;; Defined at:
  1107 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\lwdiv.c"
  1108 ;; Parameters:    Size  Location     Type
  1109 ;;  divisor         2    0[COMMON] unsigned int 
  1110 ;;  dividend        2    2[COMMON] unsigned int 
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;  quotient        2    4[COMMON] unsigned int 
  1113 ;;  counter         1    6[COMMON] unsigned char 
  1114 ;; Return value:  Size  Location     Type
  1115 ;;                  2    0[COMMON] unsigned int 
  1116 ;; Registers used:
  1117 ;;		wreg, status,2, status,0
  1118 ;; Tracked objects:
  1119 ;;		On entry : 0/0
  1120 ;;		On exit  : 0/0
  1121 ;;		Unchanged: 0/0
  1122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1123 ;;      Params:         4       0       0       0       0
  1124 ;;      Locals:         3       0       0       0       0
  1125 ;;      Temps:          0       0       0       0       0
  1126 ;;      Totals:         7       0       0       0       0
  1127 ;;Total ram usage:        7 bytes
  1128 ;; Hardware stack levels used: 1
  1129 ;; This function calls:
  1130 ;;		Nothing
  1131 ;; This function is called by:
  1132 ;;		_main
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136     06AB                     ___lwdiv:	
  1137                           ;psect for function ___lwdiv
  1138                           
  1139     06AB                     l752:	
  1140                           ;incstack = 0
  1141                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1142                           
  1143     06AB  01F4               	clrf	___lwdiv@quotient
  1144     06AC  01F5               	clrf	___lwdiv@quotient+1
  1145     06AD                     l754:
  1146     06AD  0870               	movf	___lwdiv@divisor,w
  1147     06AE  0471               	iorwf	___lwdiv@divisor+1,w
  1148     06AF  1903               	btfsc	3,2
  1149     06B0  2EB2               	goto	u191
  1150     06B1  2EB3               	goto	u190
  1151     06B2                     u191:
  1152     06B2  2EE8               	goto	l774
  1153     06B3                     u190:
  1154     06B3                     l756:
  1155     06B3  3001               	movlw	1
  1156     06B4  00F6               	movwf	___lwdiv@counter
  1157     06B5  2EBF               	goto	l762
  1158     06B6                     l758:
  1159     06B6  3001               	movlw	1
  1160     06B7                     u205:
  1161     06B7  1003               	clrc
  1162     06B8  0DF0               	rlf	___lwdiv@divisor,f
  1163     06B9  0DF1               	rlf	___lwdiv@divisor+1,f
  1164     06BA  3EFF               	addlw	-1
  1165     06BB  1D03               	skipz
  1166     06BC  2EB7               	goto	u205
  1167     06BD                     l760:
  1168     06BD  3001               	movlw	1
  1169     06BE  07F6               	addwf	___lwdiv@counter,f
  1170     06BF                     l762:
  1171     06BF  1FF1               	btfss	___lwdiv@divisor+1,7
  1172     06C0  2EC2               	goto	u211
  1173     06C1  2EC3               	goto	u210
  1174     06C2                     u211:
  1175     06C2  2EB6               	goto	l758
  1176     06C3                     u210:
  1177     06C3                     l764:
  1178     06C3  3001               	movlw	1
  1179     06C4                     u225:
  1180     06C4  1003               	clrc
  1181     06C5  0DF4               	rlf	___lwdiv@quotient,f
  1182     06C6  0DF5               	rlf	___lwdiv@quotient+1,f
  1183     06C7  3EFF               	addlw	-1
  1184     06C8  1D03               	skipz
  1185     06C9  2EC4               	goto	u225
  1186     06CA  0871               	movf	___lwdiv@divisor+1,w
  1187     06CB  0273               	subwf	___lwdiv@dividend+1,w
  1188     06CC  1D03               	skipz
  1189     06CD  2ED0               	goto	u235
  1190     06CE  0870               	movf	___lwdiv@divisor,w
  1191     06CF  0272               	subwf	___lwdiv@dividend,w
  1192     06D0                     u235:
  1193     06D0  1C03               	skipc
  1194     06D1  2ED3               	goto	u231
  1195     06D2  2ED4               	goto	u230
  1196     06D3                     u231:
  1197     06D3  2EDB               	goto	l770
  1198     06D4                     u230:
  1199     06D4                     l766:
  1200     06D4  0870               	movf	___lwdiv@divisor,w
  1201     06D5  02F2               	subwf	___lwdiv@dividend,f
  1202     06D6  0871               	movf	___lwdiv@divisor+1,w
  1203     06D7  1C03               	skipc
  1204     06D8  03F3               	decf	___lwdiv@dividend+1,f
  1205     06D9  02F3               	subwf	___lwdiv@dividend+1,f
  1206     06DA                     l768:
  1207     06DA  1474               	bsf	___lwdiv@quotient,0
  1208     06DB                     l770:
  1209     06DB  3001               	movlw	1
  1210     06DC                     u245:
  1211     06DC  1003               	clrc
  1212     06DD  0CF1               	rrf	___lwdiv@divisor+1,f
  1213     06DE  0CF0               	rrf	___lwdiv@divisor,f
  1214     06DF  3EFF               	addlw	-1
  1215     06E0  1D03               	skipz
  1216     06E1  2EDC               	goto	u245
  1217     06E2                     l772:
  1218     06E2  3001               	movlw	1
  1219     06E3  02F6               	subwf	___lwdiv@counter,f
  1220     06E4  1D03               	btfss	3,2
  1221     06E5  2EE7               	goto	u251
  1222     06E6  2EE8               	goto	u250
  1223     06E7                     u251:
  1224     06E7  2EC3               	goto	l764
  1225     06E8                     u250:
  1226     06E8                     l774:
  1227     06E8  0875               	movf	___lwdiv@quotient+1,w
  1228     06E9  00F1               	movwf	?___lwdiv+1
  1229     06EA  0874               	movf	___lwdiv@quotient,w
  1230     06EB  00F0               	movwf	?___lwdiv
  1231     06EC                     l412:
  1232     06EC  0008               	return
  1233     06ED                     __end_of___lwdiv:
  1234     0002                     ___latbits      equ	2
  1235     007E                     btemp           set	126	;btemp
  1236     007E                     wtemp0          set	126
  1237                           
  1238                           	psect	config
  1239                           
  1240                           ;Config register CONFIG1 @ 0x2007
  1241                           ;	Oscillator Selection bits
  1242                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1243                           ;	Watchdog Timer Enable bit
  1244                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1245                           ;	Power-up Timer Enable bit
  1246                           ;	PWRTE = OFF, PWRT disabled
  1247                           ;	RE3/MCLR pin function select bit
  1248                           ;	MCLRE = 0x1, unprogrammed default
  1249                           ;	Code Protection bit
  1250                           ;	CP = OFF, Program memory code protection is disabled
  1251                           ;	Data Code Protection bit
  1252                           ;	CPD = OFF, Data memory code protection is disabled
  1253                           ;	Brown Out Reset Selection bits
  1254                           ;	BOREN = OFF, BOR disabled
  1255                           ;	Internal External Switchover bit
  1256                           ;	IESO = 0x1, unprogrammed default
  1257                           ;	Fail-Safe Clock Monitor Enabled bit
  1258                           ;	FCMEN = 0x1, unprogrammed default
  1259                           ;	Low Voltage Programming Enable bit
  1260                           ;	LVP = ON, RB3/PGM pin has PGM function, low voltage programming enabled
  1261                           ;	In-Circuit Debugger Mode bit
  1262                           ;	DEBUG = 0x1, unprogrammed default
  1263     2007                     	org	8199
  1264     2007  3CF2               	dw	15602
  1265                           
  1266                           ;Config register CONFIG2 @ 0x2008
  1267                           ;	Brown-out Reset Selection bit
  1268                           ;	BOR4V = 0x1, unprogrammed default
  1269                           ;	Flash Program Memory Self Write Enable bits
  1270                           ;	WRT = OFF, Write protection off
  1271     2008                     	org	8200
  1272     2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         2
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0      20
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___lwmod
    _send_data->_clock_signal
    _send_data->_latch_enable
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     427
                                             12 COMMON     2     2      0
                            ___lwdiv
                            ___lwmod
                          _send_data
 ---------------------------------------------------------------------------------
 (1) _send_data                                            7     5      2      94
                                              1 COMMON     7     5      2
                       _clock_signal
                       _latch_enable
 ---------------------------------------------------------------------------------
 (2) _latch_enable                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _clock_signal                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     165
                                              7 COMMON     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     168
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwdiv
   ___lwmod
     ___lwdiv (ARG)
   _send_data
     _clock_signal
     _latch_enable

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BANK0               80      0      20     25.0%
BITBANK0            80      0       0      0.0%
COMMON              14     14      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0      34      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Sun Apr 27 21:52:38 2025

                      _a 0030                        _b 002E                        _c 002C  
                      _d 002A                        pc 0002           ??_clock_signal 0070  
                     l32 0619                       l29 0628                       l37 0672  
                     fsr 0004                      l412 06EC                      l422 06AA  
                    l800 06ED                      l730 060F                      l810 06F8  
                    l802 06F2                      l724 061A                      l732 0612  
                    l820 075F                      l812 06F9                      l804 06F3  
                    l726 061D                      l734 0616                      l750 066D  
                    l742 063E                      l830 078D                      l822 076F  
                    l814 070C                      l806 06F6                      l760 06BD  
                    l752 06AB                      l728 0621                      l744 0655  
                    l736 063C                      l840 07AE                      l832 0790  
                    l824 0772                      l816 072C                      l808 06F7  
                    l770 06DB                      l762 06BF                      l754 06AD  
                    l746 065A                      l850 07D4                      l842 07B6  
                    l834 0798                      l826 077A                      l818 074C  
                    l772 06E2                      l764 06C3                      l756 06B3  
                    l780 0679                      l748 0660                      l852 07D7  
                    l844 07B9                      l836 079B                      l828 077D  
                    l766 06D4                      l758 06B6                      l774 06E8  
                    l790 0693                      l782 067C                      l854 07E0  
                    l846 07C9                      l838 07AB                      l768 06DA  
                    l792 0699                      l784 0683                      l856 07E2  
                    l848 07CC                      l794 06A0                      l786 0685  
                    l778 0673                      l788 0689                      l796 06A6  
                    u210 06C3                      u211 06C2                      u205 06B7  
                    u230 06D4                      u310 06A6                      u231 06D3  
                    u311 06A5                      u320 07E0                      u225 06C4  
                    u305 069A                      u321 07DF                      u250 06E8  
                    u251 06E7                      u235 06D0                      u260 0679  
                    u180 066D                      u245 06DC                      u261 0678  
                    u181 066C                      u190 06B3                      u174 0647  
                    u191 06B2                      u175 0644                      u280 0689  
                    u281 0688                      u185 0669                      u337 0776  
                    u290 0693                      u291 0692                      u275 067D  
                    u347 0794                      u357 07B2                      u295 068F  
                    u367 07D0                      u377 0614                      u387 061F  
                    u397 0626                      fsr0 0004                      indf 0000  
                   _main 06ED                     btemp 007E                     start 0000  
                  ?_main 0070          __end_of___lwdiv 06ED          __end_of___lwmod 06AB  
          ?_latch_enable 0070                    _TRISB 0086                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 07EC  
           __end_of_main 07EC                   ??_main 007C           ??_latch_enable 0070  
   __end_of_clock_signal 0629                   _TRISC0 0438                   _TRISC1 0439  
                 _TRISC2 043A                ??___lwdiv 0074                ??___lwmod 007B  
__end_of__initialization 07FC           __pcstackCOMMON 0070             __pidataBANK0 0605  
             __pbssBANK0 0032     __end_of_latch_enable 061A               __pmaintext 06ED  
         _binary_pattern 0020                  ___lwdiv 06AB                  ___lwmod 0673  
           _clock_signal 061A                  __ptext1 063C                  __ptext2 060F  
                __ptext3 061A                  __ptext4 0673                  __ptext5 06AB  
                _counter 0032     end_of_initialization 07FC        __end_of_send_data 0673  
              _PORTBbits 0006                _PORTCbits 0007             _latch_enable 060F  
    start_initialization 07EC               init_fetch0 0629              __pdataBANK0 0020  
              ___latbits 0002                __pnvBANK0 002A         ___lwdiv@dividend 0072  
      send_data@data_out 0071                 ?___lwdiv 0070                 ?___lwmod 0077  
             send_data@i 0076         ___lwdiv@quotient 0074                _send_data 063C  
             ?_send_data 0071          ___lwdiv@divisor 0070          ___lwdiv@counter 0076  
               init_ram0 062D         ___lwmod@dividend 0079              ??_send_data 0073  
          ?_clock_signal 0070          ___lwmod@divisor 0077          ___lwmod@counter 007B  
